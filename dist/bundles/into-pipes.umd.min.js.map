{
  "version": 3,
  "file": "into-pipes.umd.min.js",
  "sources": [
    "ng://into-pipes/out/src/app/into-pipes/mask.pipe.ts",
    "ng://into-pipes/out/src/app/into-pipes/map.pipe.ts",
    "ng://into-pipes/out/src/app/into-pipes/link.pipe.ts",
    "ng://into-pipes/out/src/app/into-pipes/image.pipe.ts",
    "ng://into-pipes/out/src/app/into-pipes/prepend.pipe.ts",
    "ng://into-pipes/out/src/app/into-pipes/append.pipe.ts",
    "ng://into-pipes/out/src/app/into-pipes/wrap.pipe.ts",
    "ng://into-pipes/out/src/app/into-pipes/into.pipe.ts",
    "ng://into-pipes/out/src/app/into-pipes/pipe.module.ts"
  ],
  "sourcesContent": [
    "/*\r\n* Defines a filter to mask sensitive information.\r\n*/\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'mask' })\r\nexport class MaskPipe implements PipeTransform {\r\n    transform(item: string, ...args: any[]): string {\r\n\r\n        const visibleDigits = (args && args.length) ? args[0] : 4;\r\n        const maskWith = args.length > 1 ? args[1] : '*';\r\n        const maskedSection = item  ? item.slice(0, -visibleDigits) : \"\";\r\n        const visibleSection = item ? item.slice(-visibleDigits) : \"\";\r\n\r\n        return item ? maskedSection.replace(/./g, maskWith) + visibleSection : \"\";\r\n    }\r\n}\r\n",
    "/*\r\n* Defines a filter to convert a string into a map object.\r\n*/\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'map' })\r\nexport class MapPipe implements PipeTransform {\r\n    transform(item: string, ...args: any[]): string {\r\n\r\n        const mapping = (args && args.length) ? args[0].split('/') : [];\r\n        let result = item;\r\n\r\n        mapping.map((key: string) => {\r\n            if (key.indexOf(item) === 0) {\r\n                result = key.split(';')[1];\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\n",
    "/*\r\n* Defines a filter to convert url into a link.\r\n*/\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'link' })\r\nexport class LinkPipe implements PipeTransform {\r\n    transform(source: string, ...args: any[]): string {\r\n\r\n        const target:string = (args && args.length) ? args[0] : \"\";\r\n        const title:string = (args && args.length > 1) ? args[1] : \"\";\r\n    \r\n        return \"<a href='\"+source+\"' target='\"+target+\"'>\"+title+\"</a>\";\r\n    }\r\n}\r\n",
    "/*\r\n* Defines a filter to convert url into an image display.\r\n*/\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'image' })\r\nexport class ImagePipe implements PipeTransform {\r\n    transform(source: string, ...args: any[]): string {\r\n\r\n        const width:string = (args && args.length) ? \"width: \" + args[0] + \";\" : \"\";\r\n        const height:string = (args && args.length > 1) ? \"height: \" + args[1] + \";\" : \"\";\r\n        const alt:string = (args && args.length > 2) ? args[2] : \"\";\r\n\r\n        return \"<img src=\\'\"+source+\"\\' style=\\'\"+ width + height + \"\\' title=\\'\"+alt+\"\\' />\";\r\n    }\r\n}\r\n",
    "/*\r\n* Defines a filter to prepend character(s) to a content.\r\n*/\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'prepend' })\r\nexport class PrependPipe implements PipeTransform {\r\n    transform(source: string, ...args: any[]): string {    \r\n        return ((args && args.length) ? args[0] : \"\") + source;\r\n    }\r\n}\r\n",
    "/*\r\n* Defines a filter to append character(s) to a content.\r\n*/\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'append' })\r\nexport class AppendPipe implements PipeTransform {\r\n    transform(source: string, ...args: any[]): string {    \r\n        return source + ((args && args.length) ? args[0] : \"\");\r\n    }\r\n}\r\n",
    "/*\r\n* Defines a filter to wrap a content into character(s).\r\n*/\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'wrap' })\r\nexport class WrapPipe implements PipeTransform {\r\n    transform(source: string, ...args: any[]): string {  \r\n        const pre = (args && args.length) ? args[0] : \"\";\r\n        const post= pre.length ? \r\n                    (args.length > 1 ? args[1] : \"\") : pre;\r\n        \r\n        return pre + source + post;\r\n    }\r\n}\r\n",
    "import { Pipe, PipeTransform  } from '@angular/core';\r\nimport {\r\n  DatePipe,\r\n  CurrencyPipe,\r\n  DecimalPipe,\r\n  JsonPipe,\r\n  SlicePipe,\r\n  UpperCasePipe,\r\n  LowerCasePipe\r\n} from '@angular/common';\r\n\r\nimport {MaskPipe} from './mask.pipe';\r\nimport {MapPipe} from './map.pipe';\r\nimport {LinkPipe} from './link.pipe';\r\nimport {ImagePipe} from './image.pipe';\r\nimport {PrependPipe} from './prepend.pipe';\r\nimport {AppendPipe} from './append.pipe';\r\nimport {WrapPipe} from './wrap.pipe';\r\n\r\n@Pipe({name:'into'})\r\nexport class InToPipe implements PipeTransform{\r\ntransform(content: string, list: string): string {\r\n    let result = content;\r\n    let args:string[] = list.split(\":\");\r\n\r\n    switch(args[0]){\r\n        case \"currency\" : \r\n            // currency:en_US or currency\r\n            result = new CurrencyPipe(args.length > 1 ? args[1] : \"en_US\").transform(content); \r\n            break;\r\n        case \"append\" : \r\n            // append:something\r\n            result = new AppendPipe().transform(content, args.length > 1 ? args[1] : \"\"); \r\n            break;\r\n        case \"prepend\" : \r\n            // prepend:something\r\n            result = new PrependPipe().transform(content, args.length > 1 ? args[1] : \"\"); \r\n            break;\r\n        case \"wrap\" : \r\n            // wrap:something:something  OR wrap:something\r\n            result = new WrapPipe().transform(content, args.length > 1 ? args[1] : \"\", args.length > 2 ? args[2] : args[1]); \r\n            break;\r\n        case \"number\" : \r\n            // number:en_US:2   or number:en_US or number\r\n            if (args.length > 2) {\r\n                result = new DecimalPipe(args[1]).transform(content, args[2]);\r\n            }else {\r\n                result =  new DecimalPipe(args.length > 1 ? args[1] : \"en_US\").transform(content);\r\n            }\r\n            break;\r\n        case \"date\" : \r\n            // date:en_US:MMDDYY OR date:MMDDYY\r\n            if (args.length > 2) {\r\n                result = new DatePipe(args[1]).transform(content, args[2]);\r\n            }else {\r\n                result =  new DatePipe(\"en_US\").transform(content, args[1]);\r\n            }\r\n            break;\r\n        case \"json\" : \r\n            // json\r\n            result =  new JsonPipe().transform(content);\r\n            break;\r\n        case \"slice\" : \r\n            // slice 5:12 OR slice 5\r\n            if (args.length > 2) {\r\n                result = new SlicePipe().transform(content, parseInt(args[1], 10), parseInt(args[2], 10));\r\n            }else {\r\n                result =  new SlicePipe().transform(content, parseInt(args[1], 10));\r\n            }\r\n            break;\r\n        case \"uppercase\" : \r\n            // uppercase\r\n            result =  new UpperCasePipe().transform(content);\r\n            break;\r\n        case \"lowercase\" : \r\n            // lowercase\r\n            result =  new LowerCasePipe().transform(content);\r\n            break;\r\n        case \"mask\" : \r\n            // mask:4:*  OR mask:4\r\n            if (args.length > 2) {\r\n                result = new MaskPipe().transform(content, parseInt(args[1], 10), args[2]);\r\n            }else if (args.length > 1) {\r\n                result =  new MaskPipe().transform(content, args[1]);\r\n            } else {\r\n                result =  new MaskPipe().transform(content);\r\n            }\r\n            break;\r\n        case \"map\" : \r\n            // map\r\n            result =  new MapPipe().transform(content, args.length > 1 ? args[1] : \"\");\r\n            break;\r\n        case \"link\" : \r\n            // link:target:text or link:text or link\r\n            if (args.length > 2) {\r\n                result =  new LinkPipe().transform(content, args[1], args[2]);\r\n            } else if (args.length > 1) {\r\n                result =  new LinkPipe().transform(content, \"\", args[1]);\r\n            } else {\r\n                const q = content.indexOf(\"?\");\r\n                const t = q < 0 ? content : content.substring(0, q);\r\n                const d = t.lastIndexOf(\"/\");\r\n                const p = d < 0 ? t : t.substring(d+1);\r\n                result =  new LinkPipe().transform(content, \"\", p);\r\n            }\r\n            break;\r\n        case \"image\" : \r\n            // image:200px:auto:alttext OR image:200px:alternate-text OR image:200px OR image\r\n            if (args.length > 3) {\r\n                result =  new ImagePipe().transform(content, args[1], args[2], args[3]);\r\n            } else if (args.length > 2) {\r\n                result =  new ImagePipe().transform(content, args[1], args[2]);\r\n            } else if (args.length > 1) {\r\n                result =  new ImagePipe().transform(content, args[1]);\r\n            } else {\r\n                const q = content.indexOf(\"?\");\r\n                const t = q < 0 ? content : content.substring(0, q);\r\n                const d = t.lastIndexOf(\"/\");\r\n                const p = d < 0 ? t : t.substring(d+1);\r\n                result =  new ImagePipe().transform(content, p);\r\n            }\r\n            break;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n",
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule, DatePipe, CurrencyPipe, DecimalPipe, JsonPipe, SlicePipe, UpperCasePipe, LowerCasePipe } from '@angular/common';\r\n\r\nimport { InToPipe } from './into.pipe';\r\nimport {MaskPipe} from './mask.pipe';\r\nimport {MapPipe} from './map.pipe';\r\nimport {LinkPipe} from './link.pipe';\r\nimport {ImagePipe} from './image.pipe';\r\nimport {PrependPipe} from './prepend.pipe';\r\nimport {AppendPipe} from './append.pipe';\r\nimport {WrapPipe} from './wrap.pipe';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    InToPipe,\r\n    ImagePipe,\r\n    LinkPipe,\r\n    MaskPipe,\r\n    MapPipe,\r\n    PrependPipe,\r\n    AppendPipe,\r\n    WrapPipe\r\n  ],\r\n  exports: [\r\n    InToPipe,\r\n    ImagePipe,\r\n    LinkPipe,\r\n    MaskPipe,\r\n    MapPipe,\r\n    PrependPipe,\r\n    AppendPipe,\r\n    WrapPipe\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n    InToPipe,\r\n    DatePipe,\r\n    CurrencyPipe,\r\n    DecimalPipe,\r\n    JsonPipe,\r\n    SlicePipe,\r\n    UpperCasePipe,\r\n    LowerCasePipe,\r\n    ImagePipe,\r\n    LinkPipe,\r\n    MaskPipe,\r\n    MapPipe,\r\n    PrependPipe,\r\n    AppendPipe,\r\n    WrapPipe\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class IntoPipeModule {}\r\n"
  ],
  "names": [
    "MaskPipe",
    "prototype",
    "transform",
    "item",
    "args",
    "_i",
    "arguments",
    "length",
    "visibleDigits",
    "maskWith",
    "maskedSection",
    "slice",
    "visibleSection",
    "replace",
    "type",
    "Pipe",
    "name",
    "MapPipe",
    "mapping",
    "split",
    "result",
    "map",
    "key",
    "indexOf",
    "LinkPipe",
    "source",
    "ImagePipe",
    "PrependPipe",
    "AppendPipe",
    "WrapPipe",
    "pre",
    "InToPipe",
    "content",
    "list",
    "CurrencyPipe",
    "DecimalPipe",
    "DatePipe",
    "JsonPipe",
    "SlicePipe",
    "parseInt",
    "UpperCasePipe",
    "LowerCasePipe",
    "p",
    "d",
    "t",
    "q",
    "substring",
    "lastIndexOf",
    "IntoPipeModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "providers",
    "schemas",
    "CUSTOM_ELEMENTS_SCHEMA"
  ],
  "mappings": "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"
}
