import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
var LastUpdateComponent = /** @class */ (function () {
    function LastUpdateComponent() {
    }
    LastUpdateComponent.prototype.transform = function (source, data, args) {
        this.source = source;
        this.showIcon = (args && args.length && args[0] === 'true');
    };
    LastUpdateComponent.prototype.formatDate = function () {
        var currentDate = new Date();
        var minute = 60000; // one minute
        var hour = 3600000; // one hour limit
        var day = 86400000; // 24 hours limit
        var week = 604800000; // 7 days limit
        var month = 604800000 * 4; // 7 days limit
        var year = 604800000 * 52; // 7 days limit
        var result = "";
        var diff = currentDate.getTime() - this.source.getTime();
        if (diff <= minute) { // up to a minute
            result = "seconds ago";
        }
        else if (diff <= hour) { // up to an hour
            var minutes = Math.floor(diff / minute);
            var seconds = Math.floor((diff - (minutes * minute)) / 1000);
            result = (minutes < 2 ? "a minute" : minutes + " minutes ") + (seconds > 0 ? " and " + seconds + " seconds ago" : " ago");
        }
        else if (diff <= day) { // up to a day
            var hours = Math.floor(diff / hour);
            var minutes = Math.floor((diff - (hours * hour)) / minute);
            result = (hours < 2 ? "an hour" : hours + " hours ") + (minutes > 0 ? " and " + minutes + " minutes ago" : " ago");
        }
        else if (diff <= week) { // up to a week
            var days = Math.floor(diff / day);
            var hours = Math.floor((diff - (days * day)) / hour);
            result = (days < 2 ? "a day" : days + " days ") + (hours > 0 ? " and " + hours + " hours ago" : " ago");
        }
        else if (diff <= month) { // up to a month
            var weeks = Math.floor(diff / week);
            var days = Math.floor((diff - (weeks * week)) / day);
            result = (weeks < 2 ? "a week" : weeks + " weeks ") + (days > 0 ? " and " + days + " days ago" : " ago");
        }
        else if (diff <= year) { // up to a week
            var months = Math.floor(diff / month);
            var weeks = Math.floor((diff - (months * month)) / week);
            result = (months < 2 ? "a month" : months + " months ") + (weeks > 0 ? " and " + weeks + " weeks ago" : " ago");
        }
        else {
            var years = Math.floor(diff / year);
            var months = Math.floor((diff - (years * year)) / month);
            result = (years < 2 ? "a year" : years + " years ") + (months > 0 ? " and " + months + " months ago" : " ago");
        }
        return result;
    };
    LastUpdateComponent = tslib_1.__decorate([
        Component({
            selector: 'lastupdate-component',
            template: "\n    <span *ngIf=\"showIcon\" class=\"fa fa-clock-o\" aria-hidden=\"true\"></span>\n    <span>{{formatDate()}}</span>\n    ",
            styles: ["\n        :host {display:table;float:left;min-height: 23px;position: relative}\n        .fa {margin:0 5px 0 0}\n        @media print {\n            :host .fa-clock-o {\n                display: none;\n            }\n        }\n        "]
        })
    ], LastUpdateComponent);
    return LastUpdateComponent;
}());
export { LastUpdateComponent };
//# sourceMappingURL=data:application/json;base64,