import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var ComponentPool = /** @class */ (function () {
    function ComponentPool() {
        this.registeredPipes = {};
        this.registeredComponents = {};
        this.registeredServices = {};
    }
    ComponentPool.prototype.registerPipeTransformation = function (name, pipe) {
        this.registeredPipes[name] = pipe;
    };
    ComponentPool.prototype.registeredForPipeTransformationNamed = function (key) {
        return this.registeredPipes[key] !== undefined;
    };
    ComponentPool.prototype.registeredPipeTransformation = function (key, content, args, callback, data) {
        var pipe = this.registeredPipes[key];
        return pipe ? pipe(content, args, callback, data) : null;
    };
    ComponentPool.prototype.removePipeTransformation = function (key) {
        delete this.registeredPipes[key];
    };
    ComponentPool.prototype.registerComponent = function (name, component) {
        this.registeredComponents[name] = component;
    };
    ComponentPool.prototype.registeredForComponentWithNamed = function (name) {
        return this.registeredComponents[name] !== undefined;
    };
    ComponentPool.prototype.registeredComponent = function (name, resolver, viewRefrence, el) {
        var component = this.registeredComponents[name];
        var result = null;
        if (component) {
            var componentFactory = resolver.resolveComponentFactory(component);
            var componentRef = viewRefrence.createComponent(componentFactory);
            var domElem = componentRef.hostView.rootNodes[0];
            el.appendChild(domElem);
            domElem.setAttribute("class", "into");
            result = componentRef.instance;
        }
        return result;
    };
    ComponentPool.prototype.removeComponent = function (name) {
        delete this.registeredComponents[name];
    };
    ComponentPool.prototype.registerServiceForComponent = function (name, service) {
        this.registeredServices[name] = service;
    };
    ComponentPool.prototype.registeredServiceForComponent = function (name) {
        return this.registeredServices[name];
    };
    ComponentPool.prototype.registeredForServiceNamed = function (name) {
        return this.registeredServices[name] !== undefined;
    };
    ComponentPool.prototype.removeServiceForComponent = function (name) {
        delete this.registeredServices[name];
    };
    ComponentPool = tslib_1.__decorate([
        Injectable()
    ], ComponentPool);
    return ComponentPool;
}());
export { ComponentPool };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LnBvb2wuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2VkZWgvaW50by1waXBlcy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvaW50by1waXBlcy9jb21tb24vY29tcG9uZW50LnBvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFDTixVQUFVLEVBS1YsTUFBTSxlQUFlLENBQUM7QUFLdkI7SUFEQTtRQUVTLG9CQUFlLEdBQUUsRUFBRSxDQUFDO1FBQ3BCLHlCQUFvQixHQUFFLEVBQUUsQ0FBQztRQUN6Qix1QkFBa0IsR0FBRSxFQUFFLENBQUM7SUF5RGhDLENBQUM7SUF2REEsa0RBQTBCLEdBQTFCLFVBQTRCLElBQVksRUFBRSxJQUFTO1FBQ2xELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFDRCw0REFBb0MsR0FBcEMsVUFBcUMsR0FBVztRQUMvQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxDQUFDO0lBQ2hELENBQUM7SUFDRCxvREFBNEIsR0FBNUIsVUFBNkIsR0FBVyxFQUFFLE9BQVksRUFBRSxJQUFjLEVBQUUsUUFBYyxFQUFFLElBQVU7UUFDM0YsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV2QyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDaEUsQ0FBQztJQUNELGdEQUF3QixHQUF4QixVQUEwQixHQUFXO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQseUNBQWlCLEdBQWpCLFVBQW1CLElBQVksRUFBRSxTQUFjO1FBQzlDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDN0MsQ0FBQztJQUNELHVEQUErQixHQUEvQixVQUFnQyxJQUFZO1FBQzNDLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUN0RCxDQUFDO0lBQ0QsMkNBQW1CLEdBQW5CLFVBQ0MsSUFBWSxFQUNaLFFBQWtDLEVBQ2xDLFlBQThCLEVBQzlCLEVBQWU7UUFDZixJQUFNLFNBQVMsR0FBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkQsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQztRQUUzQixJQUFJLFNBQVMsRUFBRTtZQUNwQixJQUFJLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNuRSxJQUFNLFlBQVksR0FBc0IsWUFBWSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3ZGLElBQU0sT0FBTyxHQUFJLFlBQVksQ0FBQyxRQUFxQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQWdCLENBQUM7WUFDaEcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN4QixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN0QyxNQUFNLEdBQW1CLFlBQVksQ0FBQyxRQUFTLENBQUM7U0FDMUM7UUFDRCxPQUFRLE1BQU0sQ0FBQztJQUN0QixDQUFDO0lBQ0QsdUNBQWUsR0FBZixVQUFpQixJQUFZO1FBQzVCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxtREFBMkIsR0FBM0IsVUFBNkIsSUFBWSxFQUFFLE9BQVk7UUFDdEQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUN6QyxDQUFDO0lBQ0QscURBQTZCLEdBQTdCLFVBQThCLElBQVk7UUFDekMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNELGlEQUF5QixHQUF6QixVQUEwQixJQUFZO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUNwRCxDQUFDO0lBQ0QsaURBQXlCLEdBQXpCLFVBQTJCLElBQVk7UUFDdEMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQTNEVyxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWEsQ0E0RHpCO0lBQUQsb0JBQUM7Q0FBQSxBQTVERCxJQTREQztTQTVEWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge1xuXHRJbmplY3RhYmxlLCBcblx0Q29tcG9uZW50UmVmLCBcblx0Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBcblx0Vmlld0NvbnRhaW5lclJlZixcblx0RW1iZWRkZWRWaWV3UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQaXBlQ29tcG9uZW50IH0gZnJvbSAnLi9waXBlLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRQb29sIHtcblx0cHJpdmF0ZSByZWdpc3RlcmVkUGlwZXM9IHt9O1xuXHRwcml2YXRlIHJlZ2lzdGVyZWRDb21wb25lbnRzPSB7fTtcblx0cHJpdmF0ZSByZWdpc3RlcmVkU2VydmljZXM9IHt9O1xuXG5cdHJlZ2lzdGVyUGlwZVRyYW5zZm9ybWF0aW9uIChuYW1lOiBzdHJpbmcsIHBpcGU6IGFueSkge1xuXHRcdHRoaXMucmVnaXN0ZXJlZFBpcGVzW25hbWVdID0gcGlwZTtcblx0fVxuXHRyZWdpc3RlcmVkRm9yUGlwZVRyYW5zZm9ybWF0aW9uTmFtZWQoa2V5OiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gdGhpcy5yZWdpc3RlcmVkUGlwZXNba2V5XSAhPT0gdW5kZWZpbmVkO1xuXHR9XG5cdHJlZ2lzdGVyZWRQaXBlVHJhbnNmb3JtYXRpb24oa2V5OiBzdHJpbmcsIGNvbnRlbnQ6IGFueSwgYXJnczogc3RyaW5nW10sIGNhbGxiYWNrPzogYW55LCBkYXRhPzogYW55KSB7XG4gICAgICAgIGNvbnN0IHBpcGUgPSB0aGlzLnJlZ2lzdGVyZWRQaXBlc1trZXldO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHBpcGUgPyBwaXBlKGNvbnRlbnQsIGFyZ3MsIGNhbGxiYWNrLCBkYXRhKSA6IG51bGw7XG5cdH1cblx0cmVtb3ZlUGlwZVRyYW5zZm9ybWF0aW9uIChrZXk6IHN0cmluZykge1xuXHRcdGRlbGV0ZSB0aGlzLnJlZ2lzdGVyZWRQaXBlc1trZXldO1xuXHR9XG5cblx0cmVnaXN0ZXJDb21wb25lbnQgKG5hbWU6IHN0cmluZywgY29tcG9uZW50OiBhbnkpIHtcblx0XHR0aGlzLnJlZ2lzdGVyZWRDb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50O1xuXHR9XG5cdHJlZ2lzdGVyZWRGb3JDb21wb25lbnRXaXRoTmFtZWQobmFtZTogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVnaXN0ZXJlZENvbXBvbmVudHNbbmFtZV0gIT09IHVuZGVmaW5lZDtcblx0fVxuXHRyZWdpc3RlcmVkQ29tcG9uZW50KFxuXHRcdG5hbWU6IHN0cmluZyxcblx0XHRyZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuXHRcdHZpZXdSZWZyZW5jZTogVmlld0NvbnRhaW5lclJlZixcblx0XHRlbDogSFRNTEVsZW1lbnQpOiBQaXBlQ29tcG9uZW50IHtcblx0XHRjb25zdCBjb21wb25lbnQgPSAgdGhpcy5yZWdpc3RlcmVkQ29tcG9uZW50c1tuYW1lXTtcblx0XHRsZXQgcmVzdWx0OiBQaXBlQ29tcG9uZW50ID0gbnVsbDtcblx0XHRcbiAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuXHRcdFx0bGV0IGNvbXBvbmVudEZhY3RvcnkgPSByZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpO1xuXHRcdFx0Y29uc3QgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PiA9IHZpZXdSZWZyZW5jZS5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSk7XG5cdFx0XHRjb25zdCBkb21FbGVtID0gKGNvbXBvbmVudFJlZi5ob3N0VmlldyBhcyBFbWJlZGRlZFZpZXdSZWYgPCBhbnkgPiApLnJvb3ROb2Rlc1swXSBhcyBIVE1MRWxlbWVudDtcblx0XHRcdGVsLmFwcGVuZENoaWxkKGRvbUVsZW0pO1xuXHRcdFx0ZG9tRWxlbS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImludG9cIik7XG5cdFx0XHRyZXN1bHQgPSAoPFBpcGVDb21wb25lbnQ+Y29tcG9uZW50UmVmLmluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIHJlc3VsdDtcblx0fVxuXHRyZW1vdmVDb21wb25lbnQgKG5hbWU6IHN0cmluZykge1xuXHRcdGRlbGV0ZSB0aGlzLnJlZ2lzdGVyZWRDb21wb25lbnRzW25hbWVdO1xuXHR9XG5cblx0cmVnaXN0ZXJTZXJ2aWNlRm9yQ29tcG9uZW50IChuYW1lOiBzdHJpbmcsIHNlcnZpY2U6IGFueSkge1xuXHRcdHRoaXMucmVnaXN0ZXJlZFNlcnZpY2VzW25hbWVdID0gc2VydmljZTtcblx0fVxuXHRyZWdpc3RlcmVkU2VydmljZUZvckNvbXBvbmVudChuYW1lOiBzdHJpbmcpOiBhbnkge1xuXHRcdHJldHVybiB0aGlzLnJlZ2lzdGVyZWRTZXJ2aWNlc1tuYW1lXTtcblx0fVxuXHRyZWdpc3RlcmVkRm9yU2VydmljZU5hbWVkKG5hbWU6IHN0cmluZykge1xuXHRcdHJldHVybiB0aGlzLnJlZ2lzdGVyZWRTZXJ2aWNlc1tuYW1lXSAhPT0gdW5kZWZpbmVkO1xuXHR9XG5cdHJlbW92ZVNlcnZpY2VGb3JDb21wb25lbnQgKG5hbWU6IHN0cmluZykge1xuXHRcdGRlbGV0ZSB0aGlzLnJlZ2lzdGVyZWRTZXJ2aWNlc1tuYW1lXTtcblx0fVxufSJdfQ==